// Code generated by MockGen. DO NOT EDIT.
// Source: code.siemens.com/ozdinc.celikel/backend_master_vlass/internal/db (interfaces: Tx)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "code.siemens.com/ozdinc.celikel/backend_master_vlass/internal/db"
	gomock "github.com/golang/mock/gomock"
)

// MockTx is a mock of Tx interface.
type MockTx struct {
	ctrl     *gomock.Controller
	recorder *MockTxMockRecorder
}

// MockTxMockRecorder is the mock recorder for MockTx.
type MockTxMockRecorder struct {
	mock *MockTx
}

// NewMockTx creates a new mock instance.
func NewMockTx(ctrl *gomock.Controller) *MockTx {
	mock := &MockTx{ctrl: ctrl}
	mock.recorder = &MockTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTx) EXPECT() *MockTxMockRecorder {
	return m.recorder
}

// CreateGrade mocks base method.
func (m *MockTx) CreateGrade(arg0 context.Context, arg1 db.CreateGradeParams) (db.Grade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGrade", arg0, arg1)
	ret0, _ := ret[0].(db.Grade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGrade indicates an expected call of CreateGrade.
func (mr *MockTxMockRecorder) CreateGrade(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGrade", reflect.TypeOf((*MockTx)(nil).CreateGrade), arg0, arg1)
}

// CreateStudent mocks base method.
func (m *MockTx) CreateStudent(arg0 context.Context, arg1 db.CreateStudentParams) (db.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStudent", arg0, arg1)
	ret0, _ := ret[0].(db.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStudent indicates an expected call of CreateStudent.
func (mr *MockTxMockRecorder) CreateStudent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStudent", reflect.TypeOf((*MockTx)(nil).CreateStudent), arg0, arg1)
}

// GetGrade mocks base method.
func (m *MockTx) GetGrade(arg0 context.Context, arg1 int64) (db.Grade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGrade", arg0, arg1)
	ret0, _ := ret[0].(db.Grade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGrade indicates an expected call of GetGrade.
func (mr *MockTxMockRecorder) GetGrade(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGrade", reflect.TypeOf((*MockTx)(nil).GetGrade), arg0, arg1)
}

// GetGradeByStudentID mocks base method.
func (m *MockTx) GetGradeByStudentID(arg0 context.Context, arg1 int64) (db.Grade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGradeByStudentID", arg0, arg1)
	ret0, _ := ret[0].(db.Grade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGradeByStudentID indicates an expected call of GetGradeByStudentID.
func (mr *MockTxMockRecorder) GetGradeByStudentID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGradeByStudentID", reflect.TypeOf((*MockTx)(nil).GetGradeByStudentID), arg0, arg1)
}

// GetGradeForUpdate mocks base method.
func (m *MockTx) GetGradeForUpdate(arg0 context.Context, arg1 int64) (db.Grade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGradeForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.Grade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGradeForUpdate indicates an expected call of GetGradeForUpdate.
func (mr *MockTxMockRecorder) GetGradeForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGradeForUpdate", reflect.TypeOf((*MockTx)(nil).GetGradeForUpdate), arg0, arg1)
}

// GetStudent mocks base method.
func (m *MockTx) GetStudent(arg0 context.Context, arg1 int64) (db.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudent", arg0, arg1)
	ret0, _ := ret[0].(db.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudent indicates an expected call of GetStudent.
func (mr *MockTxMockRecorder) GetStudent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudent", reflect.TypeOf((*MockTx)(nil).GetStudent), arg0, arg1)
}

// GetStudentForUpdate mocks base method.
func (m *MockTx) GetStudentForUpdate(arg0 context.Context, arg1 int64) (db.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentForUpdate indicates an expected call of GetStudentForUpdate.
func (mr *MockTxMockRecorder) GetStudentForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentForUpdate", reflect.TypeOf((*MockTx)(nil).GetStudentForUpdate), arg0, arg1)
}

// GradingTx mocks base method.
func (m *MockTx) GradingTx(arg0 context.Context, arg1 db.GradingTxParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GradingTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GradingTx indicates an expected call of GradingTx.
func (mr *MockTxMockRecorder) GradingTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GradingTx", reflect.TypeOf((*MockTx)(nil).GradingTx), arg0, arg1)
}
