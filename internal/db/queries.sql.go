// Code generated by sqlc. DO NOT EDIT.
// source: queries.sql

package db

import (
	"context"
)

const createGrade = `-- name: CreateGrade :one
INSERT INTO grades (student_id,grade) 
VALUES ($1, $2) RETURNING id, student_id, grade, created_at
`

type CreateGradeParams struct {
	StudentID int64 `json:"student_id"`
	Grade     int64 `json:"grade"`
}

func (q *Queries) CreateGrade(ctx context.Context, arg CreateGradeParams) (Grade, error) {
	row := q.db.QueryRowContext(ctx, createGrade, arg.StudentID, arg.Grade)
	var i Grade
	err := row.Scan(
		&i.ID,
		&i.StudentID,
		&i.Grade,
		&i.CreatedAt,
	)
	return i, err
}

const createStudent = `-- name: CreateStudent :one
INSERT INTO students (name,number,nation) 
VALUES ($1, $2, $3) RETURNING id, name, number, nation, created_at
`

type CreateStudentParams struct {
	Name   string `json:"name"`
	Number int64  `json:"number"`
	Nation string `json:"nation"`
}

func (q *Queries) CreateStudent(ctx context.Context, arg CreateStudentParams) (Student, error) {
	row := q.db.QueryRowContext(ctx, createStudent, arg.Name, arg.Number, arg.Nation)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Number,
		&i.Nation,
		&i.CreatedAt,
	)
	return i, err
}

const getGrade = `-- name: GetGrade :one
SELECT id, student_id, grade, created_at FROM grades
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetGrade(ctx context.Context, id int64) (Grade, error) {
	row := q.db.QueryRowContext(ctx, getGrade, id)
	var i Grade
	err := row.Scan(
		&i.ID,
		&i.StudentID,
		&i.Grade,
		&i.CreatedAt,
	)
	return i, err
}

const getGradeByStudentID = `-- name: GetGradeByStudentID :one
SELECT id, student_id, grade, created_at FROM grades
WHERE student_id = $1 LIMIT 1
`

func (q *Queries) GetGradeByStudentID(ctx context.Context, studentID int64) (Grade, error) {
	row := q.db.QueryRowContext(ctx, getGradeByStudentID, studentID)
	var i Grade
	err := row.Scan(
		&i.ID,
		&i.StudentID,
		&i.Grade,
		&i.CreatedAt,
	)
	return i, err
}

const getGradeForUpdate = `-- name: GetGradeForUpdate :one
SELECT id, student_id, grade, created_at FROM grades
WHERE id = $1 LIMIT 1
FOR UPDATE
`

func (q *Queries) GetGradeForUpdate(ctx context.Context, id int64) (Grade, error) {
	row := q.db.QueryRowContext(ctx, getGradeForUpdate, id)
	var i Grade
	err := row.Scan(
		&i.ID,
		&i.StudentID,
		&i.Grade,
		&i.CreatedAt,
	)
	return i, err
}

const getStudent = `-- name: GetStudent :one
SELECT id, name, number, nation, created_at FROM students
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetStudent(ctx context.Context, id int64) (Student, error) {
	row := q.db.QueryRowContext(ctx, getStudent, id)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Number,
		&i.Nation,
		&i.CreatedAt,
	)
	return i, err
}

const getStudentForUpdate = `-- name: GetStudentForUpdate :one
SELECT id, name, number, nation, created_at FROM students
WHERE id = $1 LIMIT 1
FOR UPDATE
`

func (q *Queries) GetStudentForUpdate(ctx context.Context, id int64) (Student, error) {
	row := q.db.QueryRowContext(ctx, getStudentForUpdate, id)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Number,
		&i.Nation,
		&i.CreatedAt,
	)
	return i, err
}
